{"remainingRequest":"/Users/weiweiwei/code/projects/init-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/weiweiwei/code/projects/init-admin/src/views/role/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/weiweiwei/code/projects/init-admin/src/views/role/index.vue","mtime":1691899282394},{"path":"/Users/weiweiwei/code/projects/init-admin/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/weiweiwei/code/projects/init-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/weiweiwei/code/projects/init-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}